/*
 * Copyright 2017-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:Suppress("unused")

package io.lettuce.core.api.coroutines.async

import kotlinx.coroutines.future.await
import io.lettuce.core.api.coroutines.*
import io.lettuce.core.sentinel.api.coroutines.*
import io.lettuce.core.api.async.*
import io.lettuce.core.sentinel.api.async.*
import io.lettuce.core.ExperimentalLettuceCoroutinesApi
import io.lettuce.core.KeyValue
import io.lettuce.core.LPosArgs
import io.lettuce.core.output.ValueStreamingChannel


/**
 * Coroutine executed commands (based on async commands) for Lists.
 * 
 * @param <K> Key type.
 * @param <V> Value type.
 * @author Mikhael Sokolov
 * @since 6.0
 * 
 * @generated by io.lettuce.apigenerator.CreateKotlinCoroutinesAsyncImplementation
 **/
@ExperimentalLettuceCoroutinesApi
internal class RedisListSuspendableAsyncCommands<K, V>(private val ops: RedisListAsyncCommands<K, V>) : RedisListSuspendableCommands<K, V> {

    /**
     * Remove and get the first element in a list, or block until one is available.
     * 
     * @param timeout the timeout in seconds.
     * @param keys the keys.
     * @return KeyValue<K,V> array-reply specifically:
     * 
     *         A {@code null} multi-bulk when no element could be popped and the timeout expired. A two-element multi-bulk with
     *         the first element being the name of the key where an element was popped and the second element being the value of
     *         the popped element.
     * 
     **/
    override suspend fun blpop(timeout: Long, vararg keys: K?): KeyValue<K, V>? = ops.blpop(timeout, *keys).await()

    /**
     * Remove and get the last element in a list, or block until one is available.
     * 
     * @param timeout the timeout in seconds.
     * @param keys the keys.
     * @return KeyValue<K,V> array-reply specifically:
     * 
     *         A {@code null} multi-bulk when no element could be popped and the timeout expired. A two-element multi-bulk with
     *         the first element being the name of the key where an element was popped and the second element being the value of
     *         the popped element.
     * 
     **/
    override suspend fun brpop(timeout: Long, vararg keys: K?): KeyValue<K, V>? = ops.brpop(timeout, *keys).await()

    /**
     * Pop a value from a list, push it to another list and return it; or block until one is available.
     * 
     * @param timeout the timeout in seconds.
     * @param source the source key.
     * @param destination the destination type: key.
     * @return V bulk-string-reply the element being popped from {@code source} and pushed to {@code destination}. If
     *         {@code timeout} is reached, a.
     * 
     **/
    override suspend fun brpoplpush(timeout: Long, source: K?, destination: K?): V? = ops.brpoplpush(timeout, source, destination).await()

    /**
     * Get an element from a list by its index.
     * 
     * @param key the key.
     * @param index the index type: long.
     * @return V bulk-string-reply the requested element, or {@code null} when {@code index} is out of range.
     * 
     **/
    override suspend fun lindex(key: K?, index: Long): V? = ops.lindex(key, index).await()

    /**
     * Insert an element before or after another element in a list.
     * 
     * @param key the key.
     * @param before the before.
     * @param pivot the pivot.
     * @param value the value.
     * @return Long integer-reply the length of the list after the insert operation, or {@code -1} when the value {@code pivot}
     *         was not found.
     * 
     **/
    override suspend fun linsert(key: K?, before: Boolean, pivot: V?, value: V?): Long? = ops.linsert(key, before, pivot, value).await()

    /**
     * Get the length of a list.
     * 
     * @param key the key.
     * @return Long integer-reply the length of the list at {@code key}.
     * 
     **/
    override suspend fun llen(key: K?): Long? = ops.llen(key).await()

    /**
     * Remove and get the first element in a list.
     * 
     * @param key the key.
     * @return V bulk-string-reply the value of the first element, or {@code null} when {@code key} does not exist.
     * 
     **/
    override suspend fun lpop(key: K?): V? = ops.lpop(key).await()

    /**
     * Return the index of matching elements inside a Redis list. By default, when no options are given, it will scan the list
     * from head to tail, looking for the first match of "element". If the element is found, its index (the zero-based position
     * in the list) is returned. Otherwise, if no match is found, {@code null} is returned. The returned elements indexes are
     * always referring to what {@link #lindex(java.lang.Object, long)} would return. So first element from head is {@code 0},
     * and so forth.
     * 
     * @param key the key.
     * @param value the element to search for.
     * @return V integer-reply representing the matching element, or null if there is no match.
     * @since 5.3.2
     * 
     **/
    override suspend fun lpos(key: K?, value: V?): Long? = ops.lpos(key, value).await()

    /**
     * Return the index of matching elements inside a Redis list. By default, when no options are given, it will scan the list
     * from head to tail, looking for the first match of "element". If the element is found, its index (the zero-based position
     * in the list) is returned. Otherwise, if no match is found, {@code null} is returned. The returned elements indexes are
     * always referring to what {@link #lindex(java.lang.Object, long)} would return. So first element from head is {@code 0},
     * and so forth.
     * 
     * @param key the key.
     * @param value the element to search for.
     * @param args command arguments to configure{@code FIRST} and {@code MAXLEN} options.
     * @return V integer-reply representing the matching element, or null if there is no match.
     * @since 5.3.2
     * 
     **/
    override suspend fun lpos(key: K?, value: V?, args: LPosArgs?): Long? = ops.lpos(key, value, args).await()

    /**
     * Return the index of matching elements inside a Redis list using the {@code COUNT} option. By default, when no options are
     * given, it will scan the list from head to tail, looking for the first match of "element". The returned elements indexes
     * are always referring to what {@link #lindex(java.lang.Object, long)} would return. So first element from head is
     * {@code 0}, and so forth.
     * 
     * @param key the key.
     * @param value the element to search for.
     * @param count limit the number of matches.
     * @return V integer-reply representing the matching elements, or empty if there is no match.
     * @since 5.3.2
     * 
     **/
    override suspend fun lpos(key: K?, value: V?, count: Int): List<Long>? = ops.lpos(key, value, count).await()

    /**
     * Return the index of matching elements inside a Redis list using the {@code COUNT} option. By default, when no options are
     * given, it will scan the list from head to tail, looking for the first match of "element". The returned elements indexes
     * are always referring to what {@link #lindex(java.lang.Object, long)} would return. So first element from head is
     * {@code 0}, and so forth.
     * 
     * @param key the key.
     * @param value the element to search for.
     * @param count limit the number of matches.
     * @param args command arguments to configure{@code FIRST} and {@code MAXLEN} options.
     * @return V integer-reply representing the matching elements, or empty if there is no match.
     * @since 5.3.2
     * 
     **/
    override suspend fun lpos(key: K?, value: V?, count: Int, args: LPosArgs?): List<Long>? = ops.lpos(key, value, count, args).await()

    /**
     * Prepend one or multiple values to a list.
     * 
     * @param key the key.
     * @param values the value.
     * @return Long integer-reply the length of the list after the push operations.
     * 
     **/
    override suspend fun lpush(key: K?, vararg values: V?): Long? = ops.lpush(key, *values).await()

    /**
     * Prepend values to a list, only if the list exists.
     * 
     * @param key the key.
     * @param values the values.
     * @return Long integer-reply the length of the list after the push operation.
     * 
     **/
    override suspend fun lpushx(key: K?, vararg values: V?): Long? = ops.lpushx(key, *values).await()

    /**
     * Get a range of elements from a list.
     * 
     * @param key the key.
     * @param start the start type: long.
     * @param stop the stop type: long.
     * @return List<V> array-reply list of elements in the specified range.
     * 
     **/
    override suspend fun lrange(key: K?, start: Long, stop: Long): List<V>? = ops.lrange(key, start, stop).await()

    /**
     * Get a range of elements from a list.
     * 
     * @param channel the channel.
     * @param key the key.
     * @param start the start type: long.
     * @param stop the stop type: long.
     * @return Long count of elements in the specified range.
     * 
     **/
    override suspend fun lrange(channel: ValueStreamingChannel<V>?, key: K?, start: Long, stop: Long): Long? = ops.lrange(channel, key, start, stop).await()

    /**
     * Remove elements from a list.
     * 
     * @param key the key.
     * @param count the count type: long.
     * @param value the value.
     * @return Long integer-reply the number of removed elements.
     * 
     **/
    override suspend fun lrem(key: K?, count: Long, value: V?): Long? = ops.lrem(key, count, value).await()

    /**
     * Set the value of an element in a list by its index.
     * 
     * @param key the key.
     * @param index the index type: long.
     * @param value the value.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun lset(key: K?, index: Long, value: V?): String? = ops.lset(key, index, value).await()

    /**
     * Trim a list to the specified range.
     * 
     * @param key the key.
     * @param start the start type: long.
     * @param stop the stop type: long.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun ltrim(key: K?, start: Long, stop: Long): String? = ops.ltrim(key, start, stop).await()

    /**
     * Remove and get the last element in a list.
     * 
     * @param key the key.
     * @return V bulk-string-reply the value of the last element, or {@code null} when {@code key} does not exist.
     * 
     **/
    override suspend fun rpop(key: K?): V? = ops.rpop(key).await()

    /**
     * Remove the last element in a list, append it to another list and return it.
     * 
     * @param source the source key.
     * @param destination the destination type: key.
     * @return V bulk-string-reply the element being popped and pushed.
     * 
     **/
    override suspend fun rpoplpush(source: K?, destination: K?): V? = ops.rpoplpush(source, destination).await()

    /**
     * Append one or multiple values to a list.
     * 
     * @param key the key.
     * @param values the value.
     * @return Long integer-reply the length of the list after the push operation.
     * 
     **/
    override suspend fun rpush(key: K?, vararg values: V?): Long? = ops.rpush(key, *values).await()

    /**
     * Append values to a list, only if the list exists.
     * 
     * @param key the key.
     * @param values the values.
     * @return Long integer-reply the length of the list after the push operation.
     * 
     **/
    override suspend fun rpushx(key: K?, vararg values: V?): Long? = ops.rpushx(key, *values).await()

}

