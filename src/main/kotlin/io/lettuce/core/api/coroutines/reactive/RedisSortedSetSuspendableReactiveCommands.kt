/*
 * Copyright 2017-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:Suppress("unused")

package io.lettuce.core.api.coroutines.reactive

import kotlinx.coroutines.reactive.awaitFirstOrNull
import io.lettuce.core.api.coroutines.*
import io.lettuce.core.sentinel.api.coroutines.*
import io.lettuce.core.api.reactive.*
import io.lettuce.core.sentinel.api.reactive.*
import io.lettuce.core.ExperimentalLettuceCoroutinesApi
import io.lettuce.core.*
import io.lettuce.core.output.ScoredValueStreamingChannel
import io.lettuce.core.output.ValueStreamingChannel


/**
 * Coroutine executed commands (based on reactive commands) for Sorted Sets.
 * 
 * @param <K> Key type.
 * @param <V> Value type.
 * @author Mikhael Sokolov
 * @since 6.0
 * 
 * @generated by io.lettuce.apigenerator.CreateKotlinCoroutinesReactiveImplementation
 **/
@ExperimentalLettuceCoroutinesApi
internal class RedisSortedSetSuspendableReactiveCommands<K, V>(private val ops: RedisSortedSetReactiveCommands<K, V>) : RedisSortedSetSuspendableCommands<K, V> {

    /**
     * Removes and returns a member with the lowest scores in the sorted set stored at one of the keys.
     * 
     * @param timeout the timeout in seconds.
     * @param keys the keys.
     * @return KeyValue<K, ScoredValue<V>> multi-bulk containing the name of the key, the score and the popped
     *         member.
     * @since 5.1
     * 
     **/
    override suspend fun bzpopmin(timeout: Long, vararg keys: K?): KeyValue<K, ScoredValue<V>>? = ops.bzpopmin(timeout, *keys).awaitFirstOrNull()

    /**
     * Removes and returns a member with the highest scores in the sorted set stored at one of the keys.
     * 
     * @param timeout the timeout in seconds.
     * @param keys the keys.
     * @return KeyValue<K, ScoredValue<V>> multi-bulk containing the name of the key, the score and the popped
     *         member.
     * @since 5.1
     * 
     **/
    override suspend fun bzpopmax(timeout: Long, vararg keys: K?): KeyValue<K, ScoredValue<V>>? = ops.bzpopmax(timeout, *keys).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists.
     * 
     * @param key the key.
     * @param score the score.
     * @param member the member.
     * @return Long integer-reply specifically:
     * 
     *         The number of elements added to the sorted sets, not including elements already existing for which the score was
     *         updated.
     * 
     **/
    override suspend fun zadd(key: K?, score: Double, member: V?): Long? = ops.zadd(key, score, member).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists.
     * 
     * @param key the key.
     * @param scoresAndValues the scoresAndValue tuples (score,value,score,value,...).
     * @return Long integer-reply specifically:
     * 
     *         The number of elements added to the sorted sets, not including elements already existing for which the score was
     *         updated.
     * 
     **/
    override suspend fun zadd(key: K?, vararg scoresAndValues: Any?): Long? = ops.zadd(key, *scoresAndValues).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists.
     * 
     * @param key the key.
     * @param scoredValues the scored values.
     * @return Long integer-reply specifically:
     * 
     *         The number of elements added to the sorted sets, not including elements already existing for which the score was
     *         updated.
     * 
     **/
    override suspend fun zadd(key: K?, vararg scoredValues: ScoredValue<V>?): Long? = ops.zadd(key, *scoredValues).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists.
     * 
     * @param key the key.
     * @param zAddArgs arguments for zadd.
     * @param score the score.
     * @param member the member.
     * @return Long integer-reply specifically:
     * 
     *         The number of elements added to the sorted sets, not including elements already existing for which the score was
     *         updated.
     * 
     **/
    override suspend fun zadd(key: K?, zAddArgs: ZAddArgs?, score: Double, member: V?): Long? = ops.zadd(key, zAddArgs, score, member).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists.
     * 
     * @param key the key.
     * @param zAddArgs arguments for zadd.
     * @param scoresAndValues the scoresAndValue tuples (score,value,score,value,...).
     * @return Long integer-reply specifically:
     * 
     *         The number of elements added to the sorted sets, not including elements already existing for which the score was
     *         updated.
     * 
     **/
    override suspend fun zadd(key: K?, zAddArgs: ZAddArgs?, vararg scoresAndValues: Any?): Long? = ops.zadd(key, zAddArgs, *scoresAndValues).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists.
     * 
     * @param key the ke.
     * @param zAddArgs arguments for zadd.
     * @param scoredValues the scored values.
     * @return Long integer-reply specifically:
     * 
     *         The number of elements added to the sorted sets, not including elements already existing for which the score was
     *         updated.
     * 
     **/
    override suspend fun zadd(key: K?, zAddArgs: ZAddArgs?, vararg scoredValues: ScoredValue<V>?): Long? = ops.zadd(key, zAddArgs, *scoredValues).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists applying the {@code INCR} option. ZADD
     * acts like ZINCRBY.
     * 
     * @param key the key.
     * @param score the score.
     * @param member the member.
     * @return Long integer-reply specifically: The total number of elements changed.
     * 
     **/
    override suspend fun zaddincr(key: K?, score: Double, member: V?): Double? = ops.zaddincr(key, score, member).awaitFirstOrNull()

    /**
     * Add one or more members to a sorted set, or update its score if it already exists applying the {@code INCR} option. ZADD
     * acts like ZINCRBY.
     * 
     * @param key the key.
     * @param zAddArgs arguments for zadd.
     * @param score the score.
     * @param member the member.
     * @return Long integer-reply specifically: The total number of elements changed.
     * @since 4.3
     * 
     **/
    override suspend fun zaddincr(key: K?, zAddArgs: ZAddArgs?, score: Double, member: V?): Double? = ops.zaddincr(key, zAddArgs, score, member).awaitFirstOrNull()

    /**
     * Get the number of members in a sorted set.
     * 
     * @param key the key.
     * @return Long integer-reply the cardinality (number of elements) of the sorted set, or {@code false} if {@code key} does
     *         not exist.
     * 
     **/
    override suspend fun zcard(key: K?): Long? = ops.zcard(key).awaitFirstOrNull()

    /**
     * Count the members in a sorted set with scores within the given values.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long integer-reply the number of elements in the specified score range.
     * @deprecated Use {@link #zcount(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zcount(key: K?, min: Double, max: Double): Long? = ops.zcount(key, min, max).awaitFirstOrNull()

    /**
     * Count the members in a sorted set with scores within the given values.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long integer-reply the number of elements in the specified score range.
     * @deprecated Use {@link #zcount(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zcount(key: K?, min: String?, max: String?): Long? = ops.zcount(key, min, max).awaitFirstOrNull()

    /**
     * Count the members in a sorted set with scores within the given {@link Range}.
     * 
     * @param key the key.
     * @param range the range.
     * @return Long integer-reply the number of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zcount(key: K?, range: Range<out Number>?): Long? = ops.zcount(key, range).awaitFirstOrNull()

    /**
     * Increment the score of a member in a sorted set.
     * 
     * @param key the key.
     * @param amount the increment type: long.
     * @param member the member type: value.
     * @return Double bulk-string-reply the new score of {@code member} (a double precision floating point number), represented
     *         as string.
     * 
     **/
    override suspend fun zincrby(key: K?, amount: Double, member: V?): Double? = ops.zincrby(key, amount, member).awaitFirstOrNull()

    /**
     * Intersect multiple sorted sets and store the resulting sorted set in a new key.
     * 
     * @param destination the destination.
     * @param keys the keys.
     * @return Long integer-reply the number of elements in the resulting sorted set at {@code destination}.
     * 
     **/
    override suspend fun zinterstore(destination: K?, vararg keys: K?): Long? = ops.zinterstore(destination, *keys).awaitFirstOrNull()

    /**
     * Intersect multiple sorted sets and store the resulting sorted set in a new key.
     * 
     * @param destination the destination.
     * @param storeArgs the storeArgs.
     * @param keys the keys.
     * @return Long integer-reply the number of elements in the resulting sorted set at {@code destination}.
     * 
     **/
    override suspend fun zinterstore(destination: K?, storeArgs: ZStoreArgs?, vararg keys: K?): Long? = ops.zinterstore(destination, storeArgs, *keys).awaitFirstOrNull()

    /**
     * Count the number of members in a sorted set between a given lexicographical range.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long integer-reply the number of elements in the specified score range.
     * @deprecated Use {@link #zlexcount(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zlexcount(key: K?, min: String?, max: String?): Long? = ops.zlexcount(key, min, max).awaitFirstOrNull()

    /**
     * Count the number of members in a sorted set between a given lexicographical range.
     * 
     * @param key the key.
     * @param range the range.
     * @return Long integer-reply the number of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zlexcount(key: K?, range: Range<out V>?): Long? = ops.zlexcount(key, range).awaitFirstOrNull()

    /**
     * Removes and returns up to count members with the lowest scores in the sorted set stored at key.
     * 
     * @param key the key.
     * @return ScoredValue<V> the removed element.
     * @since 5.1
     * 
     **/
    override suspend fun zpopmin(key: K?): ScoredValue<V>? = ops.zpopmin(key).awaitFirstOrNull()

    /**
     * Removes and returns up to count members with the lowest scores in the sorted set stored at key.
     * 
     * @param key the key.
     * @param count the number of elements to return.
     * @return List<ScoredValue<V>> array-reply list of popped scores and elements.
     * @since 5.1
     * 
     **/
    override suspend fun zpopmin(key: K?, count: Long): List<ScoredValue<V>>? = ops.zpopmin(key, count).collectList().awaitFirstOrNull()

    /**
     * Removes and returns up to count members with the highest scores in the sorted set stored at key.
     * 
     * @param key the key.
     * @return ScoredValue<V> the removed element.
     * @since 5.1
     * 
     **/
    override suspend fun zpopmax(key: K?): ScoredValue<V>? = ops.zpopmax(key).awaitFirstOrNull()

    /**
     * Removes and returns up to count members with the highest scores in the sorted set stored at key.
     * 
     * @param key the key.
     * @param count the number of elements to return.
     * @return List<ScoredValue<V>> array-reply list of popped scores and elements.
     * @since 5.1
     * 
     **/
    override suspend fun zpopmax(key: K?, count: Long): List<ScoredValue<V>>? = ops.zpopmax(key, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by index.
     * 
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return List<V> array-reply list of elements in the specified range.
     * 
     **/
    override suspend fun zrange(key: K?, start: Long, stop: Long): List<V>? = ops.zrange(key, start, stop).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by index.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return Long count of elements in the specified range.
     * 
     **/
    override suspend fun zrange(channel: ValueStreamingChannel<V>?, key: K?, start: Long, stop: Long): Long? = ops.zrange(channel, key, start, stop).awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by index.
     * 
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return List<V> array-reply list of elements in the specified range.
     * 
     **/
    override suspend fun zrangeWithScores(key: K?, start: Long, stop: Long): List<ScoredValue<V>>? = ops.zrangeWithScores(key, start, stop).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by index.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return Long count of elements in the specified range.
     * 
     **/
    override suspend fun zrangeWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, start: Long, stop: Long): Long? = ops.zrangeWithScores(channel, key, start, stop).awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by lexicographical range.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<V> array-reply list of elements in the specified range.
     * @deprecated Use {@link #zrangebylex(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebylex(key: K?, min: String?, max: String?): List<V>? = ops.zrangebylex(key, min, max).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by lexicographical range.
     * 
     * @param key the key.
     * @param range the range.
     * @return List<V> array-reply list of elements in the specified range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebylex(key: K?, range: Range<out V>?): List<V>? = ops.zrangebylex(key, range).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by lexicographical range.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return List<V> array-reply list of elements in the specified range.
     * @deprecated Use {@link #zrangebylex(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebylex(key: K?, min: String?, max: String?, offset: Long, count: Long): List<V>? = ops.zrangebylex(key, min, max, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by lexicographical range.
     * 
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return List<V> array-reply list of elements in the specified range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebylex(key: K?, range: Range<out V>?, limit: Limit?): List<V>? = ops.zrangebylex(key, range, limit).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(key: K?, min: Double, max: Double): List<V>? = ops.zrangebyscore(key, min, max).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(key: K?, min: String?, max: String?): List<V>? = ops.zrangebyscore(key, min, max).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score.
     * 
     * @param key the key.
     * @param range the range.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscore(key: K?, range: Range<out Number>?): List<V>? = ops.zrangebyscore(key, range).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(key: K?, min: Double, max: Double, offset: Long, count: Long): List<V>? = ops.zrangebyscore(key, min, max, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(key: K?, min: String?, max: String?, offset: Long, count: Long): List<V>? = ops.zrangebyscore(key, min, max, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score.
     * 
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscore(key: K?, range: Range<out Number>?, limit: Limit?): List<V>? = ops.zrangebyscore(key, range, limit).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(ValueStreamingChannel, java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, min: Double, max: Double): Long? = ops.zrangebyscore(channel, key, min, max).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(ValueStreamingChannel, java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, min: String?, max: String?): Long? = ops.zrangebyscore(channel, key, min, max).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param range the range.
     * @return Long count of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, range: Range<out Number>?): Long? = ops.zrangebyscore(channel, key, range).awaitFirstOrNull()

    /**
     * Stream over range of members in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(ValueStreamingChannel, java.lang.Object, Range, Limit limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, min: Double, max: Double, offset: Long, count: Long): Long? = ops.zrangebyscore(channel, key, min, max, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscore(ValueStreamingChannel, java.lang.Object, Range, Limit limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, min: String?, max: String?, offset: Long, count: Long): Long? = ops.zrangebyscore(channel, key, min, max, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return Long count of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, range: Range<out Number>?, limit: Limit?): Long? = ops.zrangebyscore(channel, key, range, limit).awaitFirstOrNull()

    /**
     * Return a range of members with score in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(key: K?, min: Double, max: Double): List<ScoredValue<V>>? = ops.zrangebyscoreWithScores(key, min, max).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with score in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(key: K?, min: String?, max: String?): List<ScoredValue<V>>? = ops.zrangebyscoreWithScores(key, min, max).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with score in a sorted set, by score.
     * 
     * @param key the key.
     * @param range the range.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscoreWithScores(key: K?, range: Range<out Number>?): List<ScoredValue<V>>? = ops.zrangebyscoreWithScores(key, range).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with score in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(java.lang.Object, Range, Limit limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(key: K?, min: Double, max: Double, offset: Long, count: Long): List<ScoredValue<V>>? = ops.zrangebyscoreWithScores(key, min, max, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with score in a sorted set, by score.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(key: K?, min: String?, max: String?, offset: Long, count: Long): List<ScoredValue<V>>? = ops.zrangebyscoreWithScores(key, min, max, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with score in a sorted set, by score.
     * 
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscoreWithScores(key: K?, range: Range<out Number>?, limit: Limit?): List<ScoredValue<V>>? = ops.zrangebyscoreWithScores(key, range, limit).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, min: Double, max: Double): Long? = ops.zrangebyscoreWithScores(channel, key, min, max).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, min: String?, max: String?): Long? = ops.zrangebyscoreWithScores(channel, key, min, max).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param range the range.
     * @return Long count of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, range: Range<out Number>?): Long? = ops.zrangebyscoreWithScores(channel, key, range).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range, Limit limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, min: Double, max: Double, offset: Long, count: Long): Long? = ops.zrangebyscoreWithScores(channel, key, min, max, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified score range.
     * @deprecated Use {@link #zrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range, Limit limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, min: String?, max: String?, offset: Long, count: Long): Long? = ops.zrangebyscoreWithScores(channel, key, min, max, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return Long count of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, range: Range<out Number>?, limit: Limit?): Long? = ops.zrangebyscoreWithScores(channel, key, range, limit).awaitFirstOrNull()

    /**
     * Determine the index of a member in a sorted set.
     * 
     * @param key the key.
     * @param member the member type: value.
     * @return Long integer-reply the rank of {@code member}. If {@code member} does not exist in the sorted set or {@code key}
     *         does not exist,.
     * 
     **/
    override suspend fun zrank(key: K?, member: V?): Long? = ops.zrank(key, member).awaitFirstOrNull()

    /**
     * Remove one or more members from a sorted set.
     * 
     * @param key the key.
     * @param members the member type: value.
     * @return Long integer-reply specifically:
     * 
     *         The number of members removed from the sorted set, not including non existing members.
     * 
     **/
    override suspend fun zrem(key: K?, vararg members: V?): Long? = ops.zrem(key, *members).awaitFirstOrNull()

    /**
     * Remove all members in a sorted set between the given lexicographical range.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long integer-reply the number of elements removed.
     * @deprecated Use {@link #zremrangebylex(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zremrangebylex(key: K?, min: String?, max: String?): Long? = ops.zremrangebylex(key, min, max).awaitFirstOrNull()

    /**
     * Remove all members in a sorted set between the given lexicographical range.
     * 
     * @param key the key.
     * @param range the range.
     * @return Long integer-reply the number of elements removed.
     * @since 4.3
     * 
     **/
    override suspend fun zremrangebylex(key: K?, range: Range<out V>?): Long? = ops.zremrangebylex(key, range).awaitFirstOrNull()

    /**
     * Remove all members in a sorted set within the given indexes.
     * 
     * @param key the key.
     * @param start the start type: long.
     * @param stop the stop type: long.
     * @return Long integer-reply the number of elements removed.
     * 
     **/
    override suspend fun zremrangebyrank(key: K?, start: Long, stop: Long): Long? = ops.zremrangebyrank(key, start, stop).awaitFirstOrNull()

    /**
     * Remove all members in a sorted set within the given scores.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long integer-reply the number of elements removed.
     * @deprecated Use {@link #zremrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zremrangebyscore(key: K?, min: Double, max: Double): Long? = ops.zremrangebyscore(key, min, max).awaitFirstOrNull()

    /**
     * Remove all members in a sorted set within the given scores.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long integer-reply the number of elements removed.
     * @deprecated Use {@link #zremrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zremrangebyscore(key: K?, min: String?, max: String?): Long? = ops.zremrangebyscore(key, min, max).awaitFirstOrNull()

    /**
     * Remove all members in a sorted set within the given scores.
     * 
     * @param key the key.
     * @param range the range.
     * @return Long integer-reply the number of elements removed.
     * @since 4.3
     * 
     **/
    override suspend fun zremrangebyscore(key: K?, range: Range<out Number>?): Long? = ops.zremrangebyscore(key, range).awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by index, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return List<V> array-reply list of elements in the specified range.
     * 
     **/
    override suspend fun zrevrange(key: K?, start: Long, stop: Long): List<V>? = ops.zrevrange(key, start, stop).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by index, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return Long count of elements in the specified range.
     * 
     **/
    override suspend fun zrevrange(channel: ValueStreamingChannel<V>?, key: K?, start: Long, stop: Long): Long? = ops.zrevrange(channel, key, start, stop).awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by index, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return List<V> array-reply list of elements in the specified range.
     * 
     **/
    override suspend fun zrevrangeWithScores(key: K?, start: Long, stop: Long): List<ScoredValue<V>>? = ops.zrevrangeWithScores(key, start, stop).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by index, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param start the start.
     * @param stop the stop.
     * @return Long count of elements in the specified range.
     * 
     **/
    override suspend fun zrevrangeWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, start: Long, stop: Long): Long? = ops.zrevrangeWithScores(channel, key, start, stop).awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by lexicographical range ordered from high to low.
     * 
     * @param key the key.
     * @param range the range.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebylex(key: K?, range: Range<out V>?): List<V>? = ops.zrevrangebylex(key, range).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by lexicographical range ordered from high to low.
     * 
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebylex(key: K?, range: Range<out V>?, limit: Limit?): List<V>? = ops.zrevrangebylex(key, range, limit).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(key: K?, max: Double, min: Double): List<V>? = ops.zrevrangebyscore(key, max, min).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(key: K?, max: String?, min: String?): List<V>? = ops.zrevrangebyscore(key, max, min).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param range the range.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscore(key: K?, range: Range<out Number>?): List<V>? = ops.zrevrangebyscore(key, range).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @param offset the withscores.
     * @param count the null.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscore(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(key: K?, max: Double, min: Double, offset: Long, count: Long): List<V>? = ops.zrevrangebyscore(key, max, min, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @param offset the offset.
     * @param count the count.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscore(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(key: K?, max: String?, min: String?, offset: Long, count: Long): List<V>? = ops.zrevrangebyscore(key, max, min, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscore(key: K?, range: Range<out Number>?, limit: Limit?): List<V>? = ops.zrevrangebyscore(key, range, limit).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, max: Double, min: Double): Long? = ops.zrevrangebyscore(channel, key, max, min).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscore(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, max: String?, min: String?): Long? = ops.zrevrangebyscore(channel, key, max, min).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param range the range.
     * @return Long count of elements in the specified range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, range: Range<out Number>?): Long? = ops.zrevrangebyscore(channel, key, range).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, max: Double, min: Double, offset: Long, count: Long): Long? = ops.zrevrangebyscore(channel, key, max, min, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, max: String?, min: String?, offset: Long, count: Long): Long? = ops.zrevrangebyscore(channel, key, max, min, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every value.
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return Long count of elements in the specified range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscore(channel: ValueStreamingChannel<V>?, key: K?, range: Range<out Number>?, limit: Limit?): Long? = ops.zrevrangebyscore(channel, key, range, limit).awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(key: K?, max: Double, min: Double): List<ScoredValue<V>>? = ops.zrevrangebyscoreWithScores(key, max, min).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(key: K?, max: String?, min: String?): List<ScoredValue<V>>? = ops.zrevrangebyscoreWithScores(key, max, min).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param range the range.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscoreWithScores(key: K?, range: Range<out Number>?): List<ScoredValue<V>>? = ops.zrevrangebyscoreWithScores(key, range).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @param offset the offset.
     * @param count the count.
     * @return List<ScoredValue<V>> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(key: K?, max: Double, min: Double, offset: Long, count: Long): List<ScoredValue<V>>? = ops.zrevrangebyscoreWithScores(key, max, min, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param max max score.
     * @param min min score.
     * @param offset the offset.
     * @param count the count.
     * @return List<V> array-reply list of elements in the specified score range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(key: K?, max: String?, min: String?, offset: Long, count: Long): List<ScoredValue<V>>? = ops.zrevrangebyscoreWithScores(key, max, min, offset, count).collectList().awaitFirstOrNull()

    /**
     * Return a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param range the range.
     * @param limit limit.
     * @return List<V> array-reply list of elements in the specified score range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscoreWithScores(key: K?, range: Range<out Number>?, limit: Limit?): List<ScoredValue<V>>? = ops.zrevrangebyscoreWithScores(key, range, limit).collectList().awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, max: Double, min: Double): Long? = ops.zrevrangebyscoreWithScores(channel, key, max, min).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, max: String?, min: String?): Long? = ops.zrevrangebyscoreWithScores(channel, key, max, min).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param range the range.
     * @return Long count of elements in the specified range.
     * 
     **/
    override suspend fun zrevrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, range: Range<out Number>?): Long? = ops.zrevrangebyscoreWithScores(channel, key, range).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, max: Double, min: Double, offset: Long, count: Long): Long? = ops.zrevrangebyscoreWithScores(channel, key, max, min, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param min min score.
     * @param max max score.
     * @param offset the offset.
     * @param count the count.
     * @return Long count of elements in the specified range.
     * @deprecated Use {@link #zrevrangebyscoreWithScores(ScoredValueStreamingChannel, java.lang.Object, Range, Limit)}.
     * 
     **/
    @Deprecated(message = "Use another API instead.")
    override suspend fun zrevrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, max: String?, min: String?, offset: Long, count: Long): Long? = ops.zrevrangebyscoreWithScores(channel, key, max, min, offset, count).awaitFirstOrNull()

    /**
     * Stream over a range of members with scores in a sorted set, by score, with scores ordered from high to low.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param range the range.
     * @param limit the limit.
     * @return Long count of elements in the specified range.
     * @since 4.3
     * 
     **/
    override suspend fun zrevrangebyscoreWithScores(channel: ScoredValueStreamingChannel<V>?, key: K?, range: Range<out Number>?, limit: Limit?): Long? = ops.zrevrangebyscoreWithScores(channel, key, range, limit).awaitFirstOrNull()

    /**
     * Determine the index of a member in a sorted set, with scores ordered from high to low.
     * 
     * @param key the key.
     * @param member the member type: value.
     * @return Long integer-reply the rank of {@code member}. If {@code member} does not exist in the sorted set or {@code key}
     *         does not exist,.
     * 
     **/
    override suspend fun zrevrank(key: K?, member: V?): Long? = ops.zrevrank(key, member).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param key the key.
     * @return ScoredValueScanCursor<V> scan cursor.
     * 
     **/
    override suspend fun zscan(key: K?): ScoredValueScanCursor<V>? = ops.zscan(key).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param key the key.
     * @param scanArgs scan arguments.
     * @return ScoredValueScanCursor<V> scan cursor.
     * 
     **/
    override suspend fun zscan(key: K?, scanArgs: ScanArgs?): ScoredValueScanCursor<V>? = ops.zscan(key, scanArgs).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param key the key.
     * @param scanCursor cursor to resume from a previous scan, must not be {@code null}.
     * @param scanArgs scan arguments.
     * @return ScoredValueScanCursor<V> scan cursor.
     * 
     **/
    override suspend fun zscan(key: K?, scanCursor: ScanCursor?, scanArgs: ScanArgs?): ScoredValueScanCursor<V>? = ops.zscan(key, scanCursor, scanArgs).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param key the key.
     * @param scanCursor cursor to resume from a previous scan, must not be {@code null}.
     * @return ScoredValueScanCursor<V> scan cursor.
     * 
     **/
    override suspend fun zscan(key: K?, scanCursor: ScanCursor?): ScoredValueScanCursor<V>? = ops.zscan(key, scanCursor).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @return StreamScanCursor scan cursor.
     * 
     **/
    override suspend fun zscan(channel: ScoredValueStreamingChannel<V>?, key: K?): StreamScanCursor? = ops.zscan(channel, key).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param scanArgs scan arguments.
     * @return StreamScanCursor scan cursor.
     * 
     **/
    override suspend fun zscan(channel: ScoredValueStreamingChannel<V>?, key: K?, scanArgs: ScanArgs?): StreamScanCursor? = ops.zscan(channel, key, scanArgs).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param scanCursor cursor to resume from a previous scan, must not be {@code null}.
     * @param scanArgs scan arguments.
     * @return StreamScanCursor scan cursor.
     * 
     **/
    override suspend fun zscan(channel: ScoredValueStreamingChannel<V>?, key: K?, scanCursor: ScanCursor?, scanArgs: ScanArgs?): StreamScanCursor? = ops.zscan(channel, key, scanCursor, scanArgs).awaitFirstOrNull()

    /**
     * Incrementally iterate sorted sets elements and associated scores.
     * 
     * @param channel streaming channel that receives a call for every scored value.
     * @param key the key.
     * @param scanCursor cursor to resume from a previous scan, must not be {@code null}.
     * @return StreamScanCursor scan cursor.
     * 
     **/
    override suspend fun zscan(channel: ScoredValueStreamingChannel<V>?, key: K?, scanCursor: ScanCursor?): StreamScanCursor? = ops.zscan(channel, key, scanCursor).awaitFirstOrNull()

    /**
     * Get the score associated with the given member in a sorted set.
     * 
     * @param key the key.
     * @param member the member type: value.
     * @return Double bulk-string-reply the score of {@code member} (a double precision floating point number), represented as
     *         string.
     * 
     **/
    override suspend fun zscore(key: K?, member: V?): Double? = ops.zscore(key, member).awaitFirstOrNull()

    /**
     * Add multiple sorted sets and store the resulting sorted set in a new key.
     * 
     * @param destination destination key.
     * @param keys source keys.
     * @return Long integer-reply the number of elements in the resulting sorted set at {@code destination}.
     * 
     **/
    override suspend fun zunionstore(destination: K?, vararg keys: K?): Long? = ops.zunionstore(destination, *keys).awaitFirstOrNull()

    /**
     * Add multiple sorted sets and store the resulting sorted set in a new key.
     * 
     * @param destination the destination.
     * @param storeArgs the storeArgs.
     * @param keys the keys.
     * @return Long integer-reply the number of elements in the resulting sorted set at {@code destination}.
     * 
     **/
    override suspend fun zunionstore(destination: K?, storeArgs: ZStoreArgs?, vararg keys: K?): Long? = ops.zunionstore(destination, storeArgs, *keys).awaitFirstOrNull()

}

