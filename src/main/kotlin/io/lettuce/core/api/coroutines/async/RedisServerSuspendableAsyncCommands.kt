/*
 * Copyright 2017-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:Suppress("unused")

package io.lettuce.core.api.coroutines.async

import kotlinx.coroutines.future.await
import io.lettuce.core.api.coroutines.*
import io.lettuce.core.sentinel.api.coroutines.*
import io.lettuce.core.api.async.*
import io.lettuce.core.sentinel.api.async.*
import io.lettuce.core.ExperimentalLettuceCoroutinesApi
import java.util.Date
import io.lettuce.core.KillArgs
import io.lettuce.core.TrackingArgs
import io.lettuce.core.UnblockType
import io.lettuce.core.protocol.CommandType


/**
 * Coroutine executed commands (based on async commands) for Server Control.
 * 
 * @param <K> Key type.
 * @param <V> Value type.
 * @author Mikhael Sokolov
 * @since 6.0
 * 
 * @generated by io.lettuce.apigenerator.CreateKotlinCoroutinesAsyncImplementation
 **/
@ExperimentalLettuceCoroutinesApi
internal class RedisServerSuspendableAsyncCommands<K, V>(private val ops: RedisServerAsyncCommands<K, V>) : RedisServerSuspendableCommands<K, V> {

    /**
     * Asynchronously rewrite the append-only file.
     * 
     * @return String simple-string-reply always {@code OK}.
     * 
     **/
    override suspend fun bgrewriteaof(): String? = ops.bgrewriteaof().await()

    /**
     * Asynchronously save the dataset to disk.
     * 
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun bgsave(): String? = ops.bgsave().await()

    /**
     * Control tracking of keys in the context of server-assisted client cache invalidation.
     * 
     * @param enabled @code true} to enable key tracking.
     * @return String simple-string-reply {@code OK}.
     * @since 6.0
     * 
     **/
    override suspend fun clientCaching(enabled: Boolean): String? = ops.clientCaching(enabled).await()

    /**
     * Get the current connection name.
     * 
     * @return K bulk-string-reply The connection name, or a null bulk reply if no name is set.
     * 
     **/
    override suspend fun clientGetname(): K? = ops.clientGetname().await()

    /**
     * Returns the client ID we are redirecting our tracking notifications to.
     * 
     * @return the ID of the client we are redirecting the notifications to. The command returns -1 if client tracking is not
     *         enabled, or 0 if client tracking is enabled but we are not redirecting the notifications to any client.
     * @since 6.0
     * 
     **/
    override suspend fun clientGetredir(): Long? = ops.clientGetredir().await()

    /**
     * Get the id of the current connection.
     * 
     * @return Long The command just returns the ID of the current connection.
     * @since 5.3
     * 
     **/
    override suspend fun clientId(): Long? = ops.clientId().await()

    /**
     * Kill the connection of a client identified by ip:port.
     * 
     * @param addr ip:port.
     * @return String simple-string-reply {@code OK} if the connection exists and has been closed.
     * 
     **/
    override suspend fun clientKill(addr: String?): String? = ops.clientKill(addr).await()

    /**
     * Kill connections of clients which are filtered by {@code killArgs}.
     * 
     * @param killArgs args for the kill operation.
     * @return Long integer-reply number of killed connections.
     * 
     **/
    override suspend fun clientKill(killArgs: KillArgs?): Long? = ops.clientKill(killArgs).await()

    /**
     * Get the list of client connections.
     * 
     * @return String bulk-string-reply a unique string, formatted as follows: One client connection per line (separated by LF),
     *         each line is composed of a succession of property=value fields separated by a space character.
     * 
     **/
    override suspend fun clientList(): String? = ops.clientList().await()

    /**
     * Stop processing commands from clients for some time.
     * 
     * @param timeout the timeout value in milliseconds.
     * @return String simple-string-reply The command returns OK or an error if the timeout is invalid.
     * 
     **/
    override suspend fun clientPause(timeout: Long): String? = ops.clientPause(timeout).await()

    /**
     * Set the current connection name.
     * 
     * @param name the client name.
     * @return simple-string-reply {@code OK} if the connection name was successfully set.
     * 
     **/
    override suspend fun clientSetname(name: K?): String? = ops.clientSetname(name).await()

    /**
     * Enables the tracking feature of the Redis server, that is used for server assisted client side caching. Tracking messages
     * are either available when using the RESP3 protocol or through Pub/Sub notification when using RESP2.
     * 
     * @param args for the CLIENT TRACKING operation.
     * @return String simple-string-reply {@code OK}.
     * @since 6.0
     * 
     **/
    override suspend fun clientTracking(args: TrackingArgs?): String? = ops.clientTracking(args).await()

    /**
     * Unblock the specified blocked client.
     * 
     * @param id the client id.
     * @param type unblock type.
     * @return Long integer-reply number of unblocked connections.
     * @since 5.1
     * 
     **/
    override suspend fun clientUnblock(id: Long, type: UnblockType?): Long? = ops.clientUnblock(id, type).await()

    /**
     * Returns an array reply of details about all Redis commands.
     * 
     * @return List<Object> array-reply.
     * 
     **/
    override suspend fun command(): List<Any>? = ops.command().await()

    /**
     * Get total number of Redis commands.
     * 
     * @return Long integer-reply of number of total commands in this Redis server.
     * 
     **/
    override suspend fun commandCount(): Long? = ops.commandCount().await()

    /**
     * Returns an array reply of details about the requested commands.
     * 
     * @param commands the commands to query for.
     * @return List<Object> array-reply.
     * 
     **/
    override suspend fun commandInfo(vararg commands: String?): List<Any>? = ops.commandInfo(*commands).await()

    /**
     * Returns an array reply of details about the requested commands.
     * 
     * @param commands the commands to query for.
     * @return List<Object> array-reply.
     * 
     **/
    override suspend fun commandInfo(vararg commands: CommandType?): List<Any>? = ops.commandInfo(*commands).await()

    /**
     * Get the value of a configuration parameter.
     * 
     * @param parameter name of the parameter.
     * @return Map<String, String> bulk-string-reply.
     * 
     **/
    override suspend fun configGet(parameter: String?): Map<String, String>? = ops.configGet(parameter).await()

    /**
     * Reset the stats returned by INFO.
     * 
     * @return String simple-string-reply always {@code OK}.
     * 
     **/
    override suspend fun configResetstat(): String? = ops.configResetstat().await()

    /**
     * Rewrite the configuration file with the in memory configuration.
     * 
     * @return String simple-string-reply {@code OK} when the configuration was rewritten properly. Otherwise an error is
     *         returned.
     * 
     **/
    override suspend fun configRewrite(): String? = ops.configRewrite().await()

    /**
     * Set a configuration parameter to the given value.
     * 
     * @param parameter the parameter name.
     * @param value the parameter value.
     * @return String simple-string-reply: {@code OK} when the configuration was set properly. Otherwise an error is returned.
     * 
     **/
    override suspend fun configSet(parameter: String?, value: String?): String? = ops.configSet(parameter, value).await()

    /**
     * Return the number of keys in the selected database.
     * 
     * @return Long integer-reply.
     * 
     **/
    override suspend fun dbsize(): Long? = ops.dbsize().await()

    /**
     * Crash and recover.
     * 
     * @param delay optional delay in milliseconds.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun debugCrashAndRecover(delay: Long?): String? = ops.debugCrashAndRecover(delay).await()

    /**
     * Get debugging information about the internal hash-table state.
     * 
     * @param db the database number.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun debugHtstats(db: Int): String? = ops.debugHtstats(db).await()

    /**
     * Get debugging information about a key.
     * 
     * @param key the key.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun debugObject(key: K?): String? = ops.debugObject(key).await()

    /**
     * Make the server crash: Out of memory.
     * 
     * @return nothing, because the server crashes before returning.
     * 
     **/
    override suspend fun debugOom(): Unit? = ops.debugOom()

    /**
     * Save RDB, clear the database and reload RDB.
     * 
     * @return String simple-string-reply The commands returns OK on success.
     * 
     **/
    override suspend fun debugReload(): String? = ops.debugReload().await()

    /**
     * Restart the server gracefully.
     * 
     * @param delay optional delay in milliseconds.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun debugRestart(delay: Long?): String? = ops.debugRestart(delay).await()

    /**
     * Get debugging information about the internal SDS length.
     * 
     * @param key the key.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun debugSdslen(key: K?): String? = ops.debugSdslen(key).await()

    /**
     * Make the server crash: Invalid pointer access.
     * 
     * @return nothing, because the server crashes before returning.
     * 
     **/
    override suspend fun debugSegfault(): Unit? = ops.debugSegfault()

    /**
     * Remove all keys from all databases.
     * 
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun flushall(): String? = ops.flushall().await()

    /**
     * Remove all keys asynchronously from all databases.
     * 
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun flushallAsync(): String? = ops.flushallAsync().await()

    /**
     * Remove all keys from the current database.
     * 
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun flushdb(): String? = ops.flushdb().await()

    /**
     * Remove all keys asynchronously from the current database.
     * 
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun flushdbAsync(): String? = ops.flushdbAsync().await()

    /**
     * Get information and statistics about the server.
     * 
     * @return String bulk-string-reply as a collection of text lines.
     * 
     **/
    override suspend fun info(): String? = ops.info().await()

    /**
     * Get information and statistics about the server.
     * 
     * @param section the section type: string.
     * @return String bulk-string-reply as a collection of text lines.
     * 
     **/
    override suspend fun info(section: String?): String? = ops.info(section).await()

    /**
     * Get the UNIX time stamp of the last successful save to disk.
     * 
     * @return Date integer-reply an UNIX time stamp.
     * 
     **/
    override suspend fun lastsave(): Date? = ops.lastsave().await()

    /**
     * Reports the number of bytes that a key and its value require to be stored in RAM.
     * 
     * @return memory usage in bytes.
     * @since 5.2
     * 
     **/
    override suspend fun memoryUsage(key: K?): Long? = ops.memoryUsage(key).await()

    /**
     * Synchronously save the dataset to disk.
     * 
     * @return String simple-string-reply The commands returns OK on success.
     * 
     **/
    override suspend fun save(): String? = ops.save().await()

    /**
     * Synchronously save the dataset to disk and then shut down the server.
     * 
     * @param save @code true} force save operation.
     * 
     **/
    override suspend fun shutdown(save: Boolean): Unit? = ops.shutdown(save)

    /**
     * Make the server a replica of another instance, or promote it as master.
     * 
     * @param host the host type: string.
     * @param port the port type: string.
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun slaveof(host: String?, port: Int): String? = ops.slaveof(host, port).await()

    /**
     * Promote server as master.
     * 
     * @return String simple-string-reply.
     * 
     **/
    override suspend fun slaveofNoOne(): String? = ops.slaveofNoOne().await()

    /**
     * Read the slow log.
     * 
     * @return List<Object> deeply nested multi bulk replies.
     * 
     **/
    override suspend fun slowlogGet(): List<Any>? = ops.slowlogGet().await()

    /**
     * Read the slow log.
     * 
     * @param count the count.
     * @return List<Object> deeply nested multi bulk replies.
     * 
     **/
    override suspend fun slowlogGet(count: Int): List<Any>? = ops.slowlogGet(count).await()

    /**
     * Obtaining the current length of the slow log.
     * 
     * @return Long length of the slow log.
     * 
     **/
    override suspend fun slowlogLen(): Long? = ops.slowlogLen().await()

    /**
     * Resetting the slow log.
     * 
     * @return String simple-string-reply The commands returns OK on success.
     * 
     **/
    override suspend fun slowlogReset(): String? = ops.slowlogReset().await()

    /**
     * Return the current server time.
     * 
     * @return List<V> array-reply specifically:
     * 
     *         A multi bulk reply containing two elements:
     * 
     *         unix time in seconds. microseconds.
     * 
     **/
    override suspend fun time(): List<V>? = ops.time().await()

}

