/*
 * Copyright 2017-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:Suppress("unused")

package io.lettuce.core.api.coroutines.async

import kotlinx.coroutines.future.await
import io.lettuce.core.api.coroutines.*
import io.lettuce.core.sentinel.api.coroutines.*
import io.lettuce.core.api.async.*
import io.lettuce.core.sentinel.api.async.*
import io.lettuce.core.ExperimentalLettuceCoroutinesApi
import io.lettuce.core.*


/**
 * Coroutine executed commands (based on async commands) for the Geo-API.
 * 
 * @author Mikhael Sokolov
 * @since 6.0
 * 
 * @generated by io.lettuce.apigenerator.CreateKotlinCoroutinesAsyncImplementation
 **/
@ExperimentalLettuceCoroutinesApi
internal class RedisGeoSuspendableAsyncCommands<K, V>(private val ops: RedisGeoAsyncCommands<K, V>) : RedisGeoSuspendableCommands<K, V> {

    /**
     * Single geo add.
     * 
     * @param key the key of the geo set.
     * @param longitude the longitude coordinate according to WGS84.
     * @param latitude the latitude coordinate according to WGS84.
     * @param member the member to add.
     * @return Long integer-reply the number of elements that were added to the set.
     * 
     **/
    override suspend fun geoadd(key: K?, longitude: Double, latitude: Double, member: V?): Long? = ops.geoadd(key, longitude, latitude, member).await()

    /**
     * Multi geo add.
     * 
     * @param key the key of the geo set.
     * @param lngLatMember triplets of double longitude, double latitude and V member.
     * @return Long integer-reply the number of elements that were added to the set.
     * 
     **/
    override suspend fun geoadd(key: K?, vararg lngLatMember: Any?): Long? = ops.geoadd(key, *lngLatMember).await()

    /**
     * Retrieve Geohash strings representing the position of one or more elements in a sorted set value representing a
     * geospatial index.
     * 
     * @param key the key of the geo set.
     * @param members the members.
     * @return bulk reply Geohash strings in the order of {@code members}. Returns {@code null} if a member is not found.
     * 
     **/
    override suspend fun geohash(key: K?, vararg members: V?): List<Value<String>>? = ops.geohash(key, *members).await()

    /**
     * Retrieve members selected by distance with the center of {@code longitude} and {@code latitude}.
     * 
     * @param key the key of the geo set.
     * @param longitude the longitude coordinate according to WGS84.
     * @param latitude the latitude coordinate according to WGS84.
     * @param distance radius distance.
     * @param unit distance unit.
     * @return bulk reply.
     * 
     **/
    override suspend fun georadius(key: K?, longitude: Double, latitude: Double, distance: Double, unit: GeoArgs.Unit?): Set<V>? = ops.georadius(key, longitude, latitude, distance, unit).await()

    /**
     * Retrieve members selected by distance with the center of {@code longitude} and {@code latitude}.
     * 
     * @param key the key of the geo set.
     * @param longitude the longitude coordinate according to WGS84.
     * @param latitude the latitude coordinate according to WGS84.
     * @param distance radius distance.
     * @param unit distance unit.
     * @param geoArgs args to control the result.
     * @return nested multi-bulk reply. The {@link GeoWithin} contains only fields which were requested by {@link GeoArgs}.
     * 
     **/
    override suspend fun georadius(key: K?, longitude: Double, latitude: Double, distance: Double, unit: GeoArgs.Unit?, geoArgs: GeoArgs?): List<GeoWithin<V>>? = ops.georadius(key, longitude, latitude, distance, unit, geoArgs).await()

    /**
     * Perform a {@link #georadius(Object, double, double, double, GeoArgs.Unit, GeoArgs)} query and store the results in a
     * sorted set.
     * 
     * @param key the key of the geo set.
     * @param longitude the longitude coordinate according to WGS84.
     * @param latitude the latitude coordinate according to WGS84.
     * @param distance radius distance.
     * @param unit distance unit.
     * @param geoRadiusStoreArgs args to store either the resulting elements with their distance or the resulting elements with
     *        their locations a sorted set.
     * @return Long integer-reply the number of elements in the result.
     * 
     **/
    override suspend fun georadius(key: K?, longitude: Double, latitude: Double, distance: Double, unit: GeoArgs.Unit?, geoRadiusStoreArgs: GeoRadiusStoreArgs<K>?): Long? = ops.georadius(key, longitude, latitude, distance, unit, geoRadiusStoreArgs).await()

    /**
     * Retrieve members selected by distance with the center of {@code member}. The member itself is always contained in the
     * results.
     * 
     * @param key the key of the geo set.
     * @param member reference member.
     * @param distance radius distance.
     * @param unit distance unit.
     * @return set of members.
     * 
     **/
    override suspend fun georadiusbymember(key: K?, member: V?, distance: Double, unit: GeoArgs.Unit?): Set<V>? = ops.georadiusbymember(key, member, distance, unit).await()

    /**
     * Retrieve members selected by distance with the center of {@code member}. The member itself is always contained in the
     * results.
     * 
     * @param key the key of the geo set.
     * @param member reference member.
     * @param distance radius distance.
     * @param unit distance unit.
     * @param geoArgs args to control the result.
     * @return nested multi-bulk reply. The {@link GeoWithin} contains only fields which were requested by {@link GeoArgs}.
     * 
     **/
    override suspend fun georadiusbymember(key: K?, member: V?, distance: Double, unit: GeoArgs.Unit?, geoArgs: GeoArgs?): List<GeoWithin<V>>? = ops.georadiusbymember(key, member, distance, unit, geoArgs).await()

    /**
     * Perform a {@link #georadiusbymember(Object, Object, double, GeoArgs.Unit, GeoArgs)} query and store the results in a
     * sorted set.
     * 
     * @param key the key of the geo set.
     * @param member reference member.
     * @param distance radius distance.
     * @param unit distance unit.
     * @param geoRadiusStoreArgs args to store either the resulting elements with their distance or the resulting elements with
     *        their locations a sorted set.
     * @return Long integer-reply the number of elements in the result.
     * 
     **/
    override suspend fun georadiusbymember(key: K?, member: V?, distance: Double, unit: GeoArgs.Unit?, geoRadiusStoreArgs: GeoRadiusStoreArgs<K>?): Long? = ops.georadiusbymember(key, member, distance, unit, geoRadiusStoreArgs).await()

    /**
     * Get geo coordinates for the {@code members}.
     * 
     * @param key the key of the geo set.
     * @param members the members.
     * @return a list of {@link GeoCoordinates}s representing the x,y position of each element specified in the arguments. For
     *         missing elements {@code null} is returned.
     * 
     **/
    override suspend fun geopos(key: K?, vararg members: V?): List<GeoCoordinates>? = ops.geopos(key, *members).await()

    /**
     * Retrieve distance between points {@code from} and {@code to}. If one or more elements are missing {@code null} is
     * returned. Default in meters by, otherwise according to {@code unit}
     * 
     * @param key the key of the geo set.
     * @param from from member.
     * @param to to member.
     * @param unit distance unit.
     * @return distance between points {@code from} and {@code to}. If one or more elements are missing {@code null} is
     *         returned.
     * 
     **/
    override suspend fun geodist(key: K?, from: V?, to: V?, unit: GeoArgs.Unit?): Double? = ops.geodist(key, from, to, unit).await()

}

